/**
 * ðŸš€ React 19 Debounce Hook
 * Tá»‘i Æ°u performance cho search vÃ  filter inputs
 */

import { useState, useEffect } from 'react';

/**
 * âœ… Custom hook Ä‘á»ƒ debounce value
 * @param value - GiÃ¡ trá»‹ cáº§n debounce
 * @param delay - Delay time (milliseconds)
 * @returns Debounced value
 */
export const useDebounce = <T>(value: T, delay: number = 300): T => {
    const [debouncedValue, setDebouncedValue] = useState<T>(value);

    useEffect(() => {
        // Set timeout Ä‘á»ƒ update debounced value
        const handler = setTimeout(() => {
            setDebouncedValue(value);
        }, delay);

        // Cleanup timeout náº¿u value thay Ä‘á»•i trÆ°á»›c khi timeout complete
        return () => {
            clearTimeout(handler);
        };
    }, [value, delay]);

    return debouncedValue;
};

/**
 * âœ… Hook Ä‘á»ƒ debounce callback function
 * Há»¯u Ã­ch cho complex operations nhÆ° API calls
 */
export const useDebounceCallback = <T extends (...args: unknown[]) => unknown>(
    callback: T,
    delay: number = 300
): T => {
    const [timeoutId, setTimeoutId] = useState<ReturnType<typeof setTimeout> | null>(null);

    const debouncedCallback = ((...args: Parameters<T>) => {
        // Clear existing timeout
        if (timeoutId) {
            clearTimeout(timeoutId);
        }

        // Set new timeout
        const newTimeoutId = setTimeout(() => {
            callback(...args);
        }, delay);

        setTimeoutId(newTimeoutId);
    }) as T;

    // Cleanup on unmount
    useEffect(() => {
        return () => {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
        };
    }, [timeoutId]);

    return debouncedCallback;
};

export default useDebounce;
