/**
 * ü§ñ ChatBot Service
 * Service layer for ChatBot API calls theo API Usage Guide
 * 
 * API Endpoints:
 * - POST /api/chat - Send message to ChatBot
 * - GET /api/health - Check ChatBot API health
 */

import { ChatMessage, ChatBotRequest, ChatBotResponse, ChatBotHealthResponse } from '../types/chatbot.interface';
import api from './api';

/**
 * ChatBot API service theo API Usage Guide
 */
export class ChatBotService {

    /**
     * Send message to ChatBot API
     * @param message - User message
     * @param conversationId - Optional conversation ID
     * @returns Promise with ChatBot response
     */
    static async sendMessage(
        message: string,
        conversationId?: string
    ): Promise<ChatBotResponse> {
        try {
            const request: ChatBotRequest = {
                message,
                conversation_id: conversationId
            };

            const response = await api.post('http://localhost:3000/api/v1/chat', request);

            return (response.data as ChatBotResponse);
        } catch (error) {
            console.error('‚ùå ChatBot API Error:', error);
            throw new Error('Failed to send message to ChatBot');
        }
    }

    /**
     * Check ChatBot API health
     * @returns Promise with health status
     */
    static async checkHealth(): Promise<ChatBotHealthResponse> {
        try {
            const response = await api.get('/health');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return (response.data as any).data as ChatBotHealthResponse;
        } catch (error) {
            console.error('‚ùå ChatBot Health Check Error:', error);
            throw new Error('ChatBot health check failed');
        }
    }

    /**
     * Generate contextual response based on user input (for offline mode)
     */
    static generateContextualResponse(userInput: string): string[] {
        const input = userInput.toLowerCase();

        if (input.includes('t·∫≠p luy·ªán') || input.includes('workout') || input.includes('gym')) {
            return [
                "Tuy·ªát v·ªùi! T·∫≠p luy·ªán l√† ch√¨a kh√≥a cho s·ª©c kh·ªèe t·ªët. ",
                "ƒê·ªÉ l·∫≠p k·∫ø ho·∫°ch hi·ªáu qu·∫£, t√¥i c·∫ßn bi·∫øt:\n\n",
                "‚Ä¢ M·ª•c ti√™u c·ª• th·ªÉ c·ªßa b·∫°n\n",
                "‚Ä¢ Th·ªùi gian c√≥ th·ªÉ d√†nh ra\n",
                "‚Ä¢ Thi·∫øt b·ªã/ƒë·ªãa ƒëi·ªÉm t·∫≠p\n",
                "‚Ä¢ M·ª©c ƒë·ªô kinh nghi·ªám hi·ªán t·∫°i\n\n",
                "H√£y chia s·∫ª th√¥ng tin n√†y nh√©! üí™"
            ];
        }

        if (input.includes('dinh d∆∞·ª°ng') || input.includes('ƒÉn u·ªëng') || input.includes('nutrition')) {
            return [
                "Dinh d∆∞·ª°ng chi·∫øm 70% th√†nh c√¥ng trong fitness! ",
                "T√¥i c√≥ th·ªÉ t∆∞ v·∫•n:\n\n",
                "ü•ó Th·ª±c ƒë∆°n ph√π h·ª£p m·ª•c ti√™u\n",
                "‚è∞ Th·ªùi ƒëi·ªÉm ƒÉn t·ªëi ∆∞u\n",
                "üíä Th·ª±c ph·∫©m b·ªï sung c·∫ßn thi·∫øt\n",
                "üìä T√≠nh to√°n calo v√† macro\n\n",
                "B·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u? "
            ];
        }

        if (input.includes('gi·∫£m c√¢n') || input.includes('weight loss')) {
            return [
                "Gi·∫£m c√¢n an to√†n v√† b·ªÅn v·ªØng c·∫ßn k·∫øt h·ª£p: ",
                "üí™ T·∫≠p luy·ªán ƒë·ªÅu ƒë·∫∑n + ü•ó Ch·∫ø ƒë·ªô ƒÉn khoa h·ªçc\n\n",
                "T√¥i s·∫Ω gi√∫p b·∫°n:\n",
                "‚Ä¢ T√≠nh to√°n deficit calo ph√π h·ª£p\n",
                "‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t·∫≠p luy·ªán hi·ªáu qu·∫£\n",
                "‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô khoa h·ªçc\n\n",
                "M·ª•c ti√™u gi·∫£m bao nhi√™u kg trong bao l√¢u? "
            ];
        }

        if (input.includes('tƒÉng c∆°') || input.includes('muscle') || input.includes('bulk')) {
            return [
                "TƒÉng c∆° c·∫ßn chi·∫øn l∆∞·ª£c r√µ r√†ng! ",
                "Y·∫øu t·ªë quan tr·ªçng:\n\n",
                "üèãÔ∏è T·∫≠p luy·ªán kh√°ng l·ª±c (3-4 l·∫ßn/tu·∫ßn)\n",
                "ü•© Protein ƒë·ªß (1.6-2.2g/kg c√¢n n·∫∑ng)\n",
                "üò¥ Ngh·ªâ ng∆°i ph·ª•c h·ªìi (7-9h ng·ªß)\n",
                "üìà Progressive overload\n\n",
                "B·∫°n ƒë√£ c√≥ kinh nghi·ªám t·∫≠p t·∫° ch∆∞a? "
            ];
        }

        // Default response
        return [
            "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! ",
            "T√¥i l√† AI tr·ª£ l√Ω fitness, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi:\n\n",
            "üèãÔ∏è **K·∫ø ho·∫°ch t·∫≠p luy·ªán**: Cardio, Strength, HIIT\n",
            "ü•ó **Dinh d∆∞·ª°ng th·ªÉ thao**: Th·ª±c ƒë∆°n, macro, timing\n",
            "üéØ **M·ª•c ti√™u c·ª• th·ªÉ**: Gi·∫£m c√¢n, tƒÉng c∆°, endurance\n",
            "üî• **ƒê·ªông l·ª±c**: Tips duy tr√¨ th√≥i quen\n\n",
            "B·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ ch·ªß ƒë·ªÅ n√†o? "
        ];
    }

    /**
     * Save chat thread to local storage
     */
    static saveChatToStorage(messages: ChatMessage[]): void {
        try {
            const chatData = {
                id: Date.now().toString(),
                messages,
                timestamp: new Date().toISOString()
            };

            const existingChats = JSON.parse(localStorage.getItem('fitness_chat_history') || '[]');
            existingChats.unshift(chatData);

            // Keep only last 10 conversations
            const limitedChats = existingChats.slice(0, 10);
            localStorage.setItem('fitness_chat_history', JSON.stringify(limitedChats));
        } catch (error) {
            console.error('Failed to save chat to storage:', error);
        }
    }

    /**
     * Load chat history from local storage
     */
    static loadChatHistory(): ChatMessage[][] {
        try {
            const chatHistory = JSON.parse(localStorage.getItem('fitness_chat_history') || '[]');
            return chatHistory.map((chat: { messages: ChatMessage[] }) => chat.messages);
        } catch (error) {
            console.error('Failed to load chat history:', error);
            return [];
        }
    }

    /**
     * Clear chat history
     */
    static clearChatHistory(): void {
        localStorage.removeItem('fitness_chat_history');
    }
}
